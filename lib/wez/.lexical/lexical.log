22:29:22.689 [info] Child {LoggerFileBackend, :general_log} of Supervisor Logger.Backends.Supervisor started
Pid: #PID<0.119.0>
Start Call: Logger.Backends.Watcher.start_link({{LoggerFileBackend, :general_log}, {LoggerFileBackend, :general_log}})
Restart: :transient
Shutdown: 5000
Type: :worker
22:29:22.689 [info] Child Logger.Backends.Supervisor of Supervisor Logger.Backends.Internal started
Pid: #PID<0.118.0>
Start Call: Logger.Backends.Supervisor.start_link([{LoggerFileBackend, :general_log}])
Restart: :permanent
Shutdown: :infinity
Type: :supervisor
22:29:22.689 [info] Child Logger.Backends.Internal of Supervisor Logger.Supervisor started
Pid: #PID<0.114.0>
Start Call: Logger.Backends.Internal.start_link([])
Restart: :permanent
Shutdown: :infinity
Type: :supervisor
22:29:22.689 [info] Application logger started at :nonode@nohost
22:29:23.407 [info] Child :ttb_autostart of Supervisor :runtime_tools_sup started
Pid: #PID<0.1521.0>
Start Call: :ttb_autostart.start_link()
Restart: :temporary
Shutdown: 3000
Type: :worker
22:29:23.408 [info] Application runtime_tools started at :nonode@nohost
22:29:23.410 [info] Application erts started at :nonode@nohost
22:29:23.410 [info] Application lx_lexical_shared started at :nonode@nohost
22:29:23.410 [info] Application lx_lexical_test started at :nonode@nohost
22:29:23.411 [info] Child LXSnowflake.Generator of Supervisor #PID<0.1528.0> (Supervisor.Default) started
Pid: #PID<0.1529.0>
Start Call: LXSnowflake.Generator.start_link(1704070800000, 1)
Restart: :permanent
Shutdown: 5000
Type: :worker
22:29:23.411 [info] Application lx_snowflake started at :nonode@nohost
22:29:23.411 [info] Application lx_sourceror started at :nonode@nohost
22:29:23.411 [info] Application lx_common started at :nonode@nohost
22:29:23.411 [info] Application lx_elixir_sense started at :nonode@nohost
22:29:23.416 [info] Application jason started at :nonode@nohost
22:29:23.416 [info] Application logger_file_backend started at :nonode@nohost
22:29:23.416 [info] Application lx_path_glob started at :nonode@nohost
22:29:23.416 [info] Application lx_proto started at :nonode@nohost
22:29:23.416 [info] Application lx_protocol started at :nonode@nohost
22:29:23.426 [info] Child LXical.Document.Store of Supervisor LXical.Server.Supervisor started
Pid: #PID<0.1542.0>
Start Call: LXical.Document.Store.start_link([derive: [analysis: &LXical.Ast.analyze/1]])
Restart: :permanent
Shutdown: 5000
Type: :worker
22:29:23.429 [info] Child LXical.Server of Supervisor LXical.Server.Supervisor started
Pid: #PID<0.1543.0>
Start Call: LXical.Server.start_link([])
Restart: :permanent
Shutdown: 5000
Type: :worker
22:29:23.429 [info] Child LXical.Server.ProjectSupervisor of Supervisor LXical.Server.Supervisor started
Pid: #PID<0.1544.0>
Start Call: DynamicSupervisor.start_link([name: LXical.Server.ProjectSupervisor, strategy: :one_for_one])
Restart: :permanent
Shutdown: :infinity
Type: :supervisor
22:29:23.429 [info] Child LXical.Server.Provider.Queue.Supervisor of Supervisor LXical.Server.Supervisor started
Pid: #PID<0.1545.0>
Start Call: Task.Supervisor.start_link([name: LXical.Server.Provider.Queue.Supervisor])
Restart: :permanent
Shutdown: :infinity
Type: :supervisor
22:29:23.430 [info] Child LXical.Server.Provider.Queue of Supervisor LXical.Server.Supervisor started
Pid: #PID<0.1546.0>
Start Call: LXical.Server.Provider.Queue.start_link([])
Restart: :permanent
Shutdown: 5000
Type: :worker
22:29:23.430 [info] Child LXical.Server.Transport.StdIO of Supervisor LXical.Server.Supervisor started
Pid: #PID<0.1547.0>
Start Call: LXical.Server.Transport.StdIO.start_link(:standard_io, &LXical.Server.protocol_message/1)
Restart: :permanent
Shutdown: 5000
Type: :worker
22:29:23.430 [info] Application lx_server started at :nonode@nohost
22:29:23.442 [info] Starting project at uri file:///Users/axcelott/Documents/Personal/wez
22:29:23.454 [info] Child {LXical.Server.Project.Progress, "wez"} of Supervisor :"wez::supervisor" started
Pid: #PID<0.1549.0>
Start Call: LXical.Server.Project.Progress.start_link(%LXical.Project{root_uri: "file:///Users/axcelott/Documents/Personal/wez", mix_exs_uri: "file:///Users/axcelott/Documents/Personal/wez/mix.exs", mix_project?: true, mix_env: nil, mix_target: nil, env_variables: %{}, project_module: nil, entropy: 5060})
Restart: :permanent
Shutdown: 5000
Type: :worker
22:29:23.457 [info] Child {LXical.RemoteControl.ProjectNodeSupervisor, "wez"} of Supervisor :"wez::supervisor" started
Pid: #PID<0.1550.0>
Start Call: LXical.RemoteControl.ProjectNodeSupervisor.start_link(%LXical.Project{root_uri: "file:///Users/axcelott/Documents/Personal/wez", mix_exs_uri: "file:///Users/axcelott/Documents/Personal/wez/mix.exs", mix_project?: true, mix_env: nil, mix_target: nil, env_variables: %{}, project_module: nil, entropy: 5060})
Restart: :permanent
Shutdown: 5000
Type: :worker
22:29:23.466 [info] Child :erl_epmd of Supervisor :net_sup started
Pid: #PID<0.1553.0>
Start Call: :erl_epmd.start_link()
Restart: :permanent
Shutdown: 2000
Type: :worker
22:29:23.468 [info] Child :auth of Supervisor :net_sup started
Pid: #PID<0.1554.0>
Start Call: :auth.start_link()
Restart: :permanent
Shutdown: 2000
Type: :worker
22:29:23.470 [info] Child :net_kernel of Supervisor :net_sup started
Pid: #PID<0.1555.0>
Start Call: :net_kernel.start_link(%{name: :"manager-wez-5060@127.0.0.1", supervisor: :net_sup_dynamic, net_tickintensity: 4, net_ticktime: 60, name_domain: :longnames, clean_halt: false})
Restart: :permanent
Shutdown: 2000
Type: :worker
22:29:23.470 [info] Child :net_sup_dynamic of Supervisor :kernel_sup started
Pid: #PID<0.1552.0>
Start Call: :erl_distribution.start_link(%{name: :"manager-wez-5060@127.0.0.1", supervisor: :net_sup_dynamic, net_tickintensity: 4, net_ticktime: 60, name_domain: :longnames, clean_halt: false})
Restart: :permanent
Shutdown: 1000
Type: :supervisor
22:29:23.966 [info] Child {LXical.Server.Project.Node, "wez"} of Supervisor :"wez::supervisor" started
Pid: #PID<0.1551.0>
Start Call: LXical.Server.Project.Node.start_link(%LXical.Project{root_uri: "file:///Users/axcelott/Documents/Personal/wez", mix_exs_uri: "file:///Users/axcelott/Documents/Personal/wez/mix.exs", mix_project?: true, mix_env: nil, mix_target: nil, env_variables: %{}, project_module: nil, entropy: 5060})
Restart: :permanent
Shutdown: 5000
Type: :worker
22:29:23.970 [info] Child {LXical.Server.Project.Diagnostics, "wez"} of Supervisor :"wez::supervisor" started
Pid: #PID<0.1563.0>
Start Call: LXical.Server.Project.Diagnostics.start_link(%LXical.Project{root_uri: "file:///Users/axcelott/Documents/Personal/wez", mix_exs_uri: "file:///Users/axcelott/Documents/Personal/wez/mix.exs", mix_project?: true, mix_env: nil, mix_target: nil, env_variables: %{}, project_module: nil, entropy: 5060})
Restart: :permanent
Shutdown: 5000
Type: :worker
22:29:23.973 [info] Child {LXical.Server.Project.Intelligence, "wez"} of Supervisor :"wez::supervisor" started
Pid: #PID<0.1564.0>
Start Call: LXical.Server.Project.Intelligence.start_link(%LXical.Project{root_uri: "file:///Users/axcelott/Documents/Personal/wez", mix_exs_uri: "file:///Users/axcelott/Documents/Personal/wez/mix.exs", mix_project?: true, mix_env: nil, mix_target: nil, env_variables: %{}, project_module: nil, entropy: 5060})
Restart: :permanent
Shutdown: 5000
Type: :worker
22:29:23.974 [info] Child LXical.Server.Project.SearchListener of Supervisor :"wez::supervisor" started
Pid: #PID<0.1565.0>
Start Call: LXical.Server.Project.SearchListener.start_link(%LXical.Project{root_uri: "file:///Users/axcelott/Documents/Personal/wez", mix_exs_uri: "file:///Users/axcelott/Documents/Personal/wez/mix.exs", mix_project?: true, mix_env: nil, mix_target: nil, env_variables: %{}, project_module: nil, entropy: 5060})
Restart: :permanent
Shutdown: 5000
Type: :worker
22:29:23.975 [info] Lexical Initialized
22:29:23.975 [info] opened file:///Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex
22:29:24.538 [info] Compiled wez in 571 ms
22:29:26.395 [info] Completion for LxPos<<1, 5>>
22:29:26.398 [info] Local completions are []
22:29:26.398 [info] Emitting completions: []
22:29:26.995 [info] Completion for LxPos<<1, 8>>
22:29:27.831 [info] Local completions are []
22:29:27.831 [info] Emitting completions: []
22:29:28.400 [info] Completion for LxPos<<1, 9>>
22:29:28.442 [info] Local completions are [%LXical.RemoteControl.Completion.Candidate.Module{full_name: "Wez.MixProject", metadata: %{}, name: "MixProject", summary: ""}, %LXical.RemoteControl.Completion.Candidate.Struct{full_name: "Wez.Op", metadata: %{}, name: "Op", summary: "Operations that the Wez VM supports.\n"}, %LXical.RemoteControl.Completion.Candidate.Module{full_name: "Wez.Stack", metadata: %{}, name: "Stack", summary: "The stack on which Wez operates.\n"}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["atom"], arity: 1, name: "__info__", origin: "Wez", type: :function, visibility: :public, spec: "@spec __info__(:attributes) :: keyword()\n@spec __info__(:compile) :: [term()]\n@spec __info__(:functions) :: [{atom, non_neg_integer}]\n@spec __info__(:macros) :: [{atom, non_neg_integer}]\n@spec __info__(:md5) :: binary()\n@spec __info__(:module) :: module()", summary: "Built-in function", metadata: %{builtin: true}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["operations"], arity: 1, name: "evaluate", origin: "Wez", type: :function, visibility: :public, spec: "@spec evaluate([Operation.t()]) :: Wez.Stack.t()", summary: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: [], arity: 0, name: "main", origin: "Wez", type: :function, visibility: :public, spec: "@spec main() :: Wez.Stack.t()", summary: "", metadata: %{hidden: true}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: [], arity: 0, name: "module_info", origin: "Wez", type: :function, visibility: :public, spec: "@spec module_info :: [{:module | :attributes | :compile | :exports | :md5 | :native, term}]", summary: "Built-in function", metadata: %{builtin: true}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["key"], arity: 1, name: "module_info", origin: "Wez", type: :function, visibility: :public, spec: "@spec module_info(:module) :: atom\n@spec module_info(:attributes | :compile) :: [{atom, term}]\n@spec module_info(:md5) :: binary\n@spec module_info(:exports | :functions | :nifs) :: [{atom, non_neg_integer}]\n@spec module_info(:native) :: boolean", summary: "Built-in function", metadata: %{builtin: true}}]
22:29:28.458 [info] Emitting completions: [#Protocol.Types.Completion.Item<[label: "MixProject", kind: :module, detail: "Wez.MixProject", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 44, dirty?: true, lines: %Lines<"def Wez...."(1 line)>, ...>, edits: %LXical.Document.Edit{text: "MixProject", range: LxRange[<<1, 9>>...<<1, 9>>]}}, sort_text: "0001_MixProject"]>, #Protocol.Types.Completion.Item<[label: "Op", kind: :module, detail: "Operations that the Wez VM supports.\n", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 44, dirty?: true, lines: %Lines<"def Wez...."(1 line)>, ...>, edits: %LXical.Document.Edit{text: "Op", range: LxRange[<<1, 9>>...<<1, 9>>]}}, sort_text: "0001_Op"]>, #Protocol.Types.Completion.Item<[label: "Stack", kind: :module, detail: "The stack on which Wez operates.\n", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 44, dirty?: true, lines: %Lines<"def Wez...."(1 line)>, ...>, edits: %LXical.Document.Edit{text: "Stack", range: LxRange[<<1, 9>>...<<1, 9>>]}}, sort_text: "0001_Stack"]>, #Protocol.Types.Completion.Item<[label: "__info__(atom)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Built-in function\n```elixir\n@spec __info__(:attributes) :: keyword()\n@spec __info__(:compile) :: [term()]\n@spec __info__(:functions) :: [{atom, non_neg_integer}]\n@spec __info__(:macros) :: [{atom, non_neg_integer}]\n@spec __info__(:md5) :: binary()\n@spec __info__(:module) :: module()\n```", kind: :markdown]>, detail: "(function)", filter_text: "__info__", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 44, dirty?: true, lines: %Lines<"def Wez...."(1 line)>, ...>, edits: %LXical.Document.Edit{text: "__info__(${1:atom})", range: LxRange[<<1, 9>>...<<1, 9>>]}}, insert_text_format: :snippet, sort_text: "0309_info__:001"]>, #Protocol.Types.Completion.Item<[label: "evaluate(operations)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "\n```elixir\n@spec evaluate([Operation.t()]) :: Wez.Stack.t()\n```", kind: :markdown]>, detail: "(function)", filter_text: "evaluate", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 44, dirty?: true, lines: %Lines<"def Wez...."(1 line)>, ...>, edits: %LXical.Document.Edit{text: "evaluate(${1:operations})", range: LxRange[<<1, 9>>...<<1, 9>>]}}, insert_text_format: :snippet, sort_text: "0301_evaluate:001"]>, #Protocol.Types.Completion.Item<[label: "main()", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "\n```elixir\n@spec main() :: Wez.Stack.t()\n```", kind: :markdown]>, detail: "(function)", filter_text: "main", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 44, dirty?: true, lines: %Lines<"def Wez...."(1 line)>, ...>, edits: %LXical.Document.Edit{text: "main()", range: LxRange[<<1, 9>>...<<1, 9>>]}}, insert_text_format: :snippet, sort_text: "0301_main:000"]>, #Protocol.Types.Completion.Item<[label: "module_info()", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Built-in function\n```elixir\n@spec module_info :: [{:module | :attributes | :compile | :exports | :md5 | :native, term}]\n```", kind: :markdown]>, detail: "(function)", filter_text: "module_info", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 44, dirty?: true, lines: %Lines<"def Wez...."(1 line)>, ...>, edits: %LXical.Document.Edit{text: "module_info()", range: LxRange[<<1, 9>>...<<1, 9>>]}}, insert_text_format: :snippet, sort_text: "0401_module_info:000"]>, #Protocol.Types.Completion.Item<[label: "module_info(key)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Built-in function\n```elixir\n@spec module_info(:module) :: atom\n@spec module_info(:attributes | :compile) :: [{atom, term}]\n@spec module_info(:md5) :: binary\n@spec module_info(:exports | :functions | :nifs) :: [{atom, non_neg_integer}]\n@spec module_info(:native) :: boolean\n```", kind: :markdown]>, detail: "(function)", filter_text: "module_info", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 44, dirty?: true, lines: %Lines<"def Wez...."(1 line)>, ...>, edits: %LXical.Document.Edit{text: "module_info(${1:key})", range: LxRange[<<1, 9>>...<<1, 9>>]}}, insert_text_format: :snippet, sort_text: "0401_module_info:001"]>]
22:29:31.584 [info] Completion for LxPos<<1, 19>>
22:29:31.617 [info] Local completions are []
22:29:31.618 [info] Emitting completions: []
22:29:32.728 [info] Completion for LxPos<<1, 23>>
22:29:32.761 [info] Local completions are []
22:29:32.761 [info] Emitting completions: []
22:29:33.324 [info] Emitting completions: [#Protocol.Types.Completion.Item<[label: "do/end block", filter_text: "do", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 71, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(1 line)>, ...>, edits: %LXical.Document.Edit{text: "do\n  $0\nend", range: LxRange[<<1, 24>>...<<1, 26>>]}}, insert_text_format: :snippet, sort_text: "0901_do/end block"]>]
22:29:33.784 [info] Completion for LxPos<<2, 4>>
22:29:33.801 [info] Local completions are []
22:29:33.801 [info] Emitting completions: []
22:29:35.083 [info] Emitting completions: []
22:29:38.304 [info] Completion for LxPos<<3, 8>>
22:29:38.328 [info] Local completions are []
22:29:38.328 [info] Emitting completions: []
22:29:38.680 [info] Completion for LxPos<<3, 11>>
22:29:38.703 [info] Local completions are [%LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["args"], arity: 1, name: "with", origin: "Kernel.SpecialForms", type: :macro, visibility: :public, spec: "", metadata: %{}}]
22:29:38.709 [info] Emitting completions: [#Protocol.Types.Completion.Item<[label: "with (with statement)", kind: :class, detail: "", filter_text: "with", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 95, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(4 lines)>, ...>, edits: %LXical.Document.Edit{text: "with ${1:pattern} <- ${2:expression} do\n  $0\nend", range: LxRange[<<3, 10>>...<<3, 11>>]}}, insert_text_format: :snippet, sort_text: "0401_with (with statement)"]>]
22:29:39.354 [info] Completion for LxPos<<3, 16>>
22:29:39.391 [info] Local completions are [%LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["number"], arity: 1, name: "abs", origin: "Kernel", type: :function, visibility: :public, spec: "@spec abs(number()) :: number()", summary: "Returns an integer or float which is the arithmetical absolute value of `number`.", metadata: %{guard: true}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["fun", "args"], arity: 2, name: "apply", origin: "Kernel", type: :function, visibility: :public, spec: "@spec apply((... -> any()), [any()]) :: any()", summary: "Invokes the given anonymous function `fun` with the list of\narguments `args`.", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["module", "function_name", "args"], arity: 3, name: "apply", origin: "Kernel", type: :function, visibility: :public, spec: "@spec apply(module(), function_name :: atom(), [any()]) :: any()", summary: "Invokes the given function from `module` with the list of\narguments `args`.", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["module", "opts"], arity: 2, name: "alias", origin: "Kernel.SpecialForms", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["alias"], arity: 1, name: "alias!", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["left", "right"], arity: 2, name: "and", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{guard: true}}]
22:29:39.398 [info] Emitting completions: [#Protocol.Types.Completion.Item<[label: "abs(number)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Returns an integer or float which is the arithmetical absolute value of `number`.\n```elixir\n@spec abs(number()) :: number()\n```", kind: :markdown]>, detail: "(function)", filter_text: "abs", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 100, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(4 lines)>, ...>, edits: %LXical.Document.Edit{text: "abs(${1:number})", range: LxRange[<<3, 15>>...<<3, 16>>]}}, insert_text_format: :snippet, sort_text: "0401_abs:001"]>, #Protocol.Types.Completion.Item<[label: "apply(fun, args)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Invokes the given anonymous function `fun` with the list of\narguments `args`.\n```elixir\n@spec apply((... -> any()), [any()]) :: any()\n```", kind: :markdown]>, detail: "(function)", filter_text: "apply", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 100, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(4 lines)>, ...>, edits: %LXical.Document.Edit{text: "apply(${1:fun}, ${2:args})", range: LxRange[<<3, 15>>...<<3, 16>>]}}, insert_text_format: :snippet, sort_text: "0401_apply:002"]>, #Protocol.Types.Completion.Item<[label: "apply(module, function_name, args)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Invokes the given function from `module` with the list of\narguments `args`.\n```elixir\n@spec apply(module(), function_name :: atom(), [any()]) :: any()\n```", kind: :markdown]>, detail: "(function)", filter_text: "apply", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 100, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(4 lines)>, ...>, edits: %LXical.Document.Edit{text: "apply(${1:module}, ${2:function_name}, ${3:args})", range: LxRange[<<3, 15>>...<<3, 16>>]}}, insert_text_format: :snippet, sort_text: "0401_apply:003"]>, #Protocol.Types.Completion.Item<[label: "alias (alias a module's name)", kind: :class, detail: "", filter_text: "alias", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 100, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(4 lines)>, ...>, edits: %LXical.Document.Edit{text: "alias $0", range: LxRange[<<3, 15>>...<<3, 16>>]}}, insert_text_format: :snippet, sort_text: "0401_alias (alias a module's name)"]>]
22:29:40.089 [info] Completion for LxPos<<3, 20>>
22:29:40.110 [info] Completion for LxPos<<3, 21>>
22:29:40.120 [info] Local completions are []
22:29:40.120 [info] Emitting completions: []
22:29:40.129 [info] Local completions are []
22:29:40.129 [info] Emitting completions: []
22:29:41.169 [info] Completion for LxPos<<3, 27>>
22:29:41.199 [info] Completion for LxPos<<3, 28>>
22:29:41.209 [info] Local completions are [%LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["term"], arity: 1, name: "throw", origin: "Kernel", type: :function, visibility: :public, spec: "@spec throw(term()) :: no_return()", summary: "A non-local return from a function.", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["list"], arity: 1, name: "tl", origin: "Kernel", type: :function, visibility: :public, spec: "@spec tl(nonempty_maybe_improper_list(elem, last)) :: maybe_improper_list(elem, last) | last\nwhen elem: term(), last: term()", summary: "Returns the tail of a list. Raises `ArgumentError` if the list is empty.", metadata: %{guard: true}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["number"], arity: 1, name: "trunc", origin: "Kernel", type: :function, visibility: :public, spec: "@spec trunc(number()) :: integer()", summary: "Returns the integer part of `number`.", metadata: %{guard: true}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["tuple"], arity: 1, name: "tuple_size", origin: "Kernel", type: :function, visibility: :public, spec: "@spec tuple_size(tuple()) :: non_neg_integer()", summary: "Returns the size of a tuple.", metadata: %{guard: true}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["args"], arity: 1, name: "try", origin: "Kernel.SpecialForms", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["value", "fun"], arity: 2, name: "tap", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{since: "1.12.0"}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["value", "fun"], arity: 2, name: "then", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{since: "1.12.0"}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["arg"], arity: 1, name: "to_char_list", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{hidden: true}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["term"], arity: 1, name: "to_charlist", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["term"], arity: 1, name: "to_string", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}]
22:29:41.222 [info] Local completions are [%LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["term"], arity: 1, name: "throw", origin: "Kernel", type: :function, visibility: :public, spec: "@spec throw(term()) :: no_return()", summary: "A non-local return from a function.", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["arg"], arity: 1, name: "to_char_list", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{hidden: true}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["term"], arity: 1, name: "to_charlist", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["term"], arity: 1, name: "to_string", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}]
22:29:41.231 [info] Emitting completions: [#Protocol.Types.Completion.Item<[label: "throw(term)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "A non-local return from a function.\n```elixir\n@spec throw(term()) :: no_return()\n```", kind: :markdown]>, detail: "(function)", filter_text: "throw", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 114, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(4 lines)>, ...>, edits: %LXical.Document.Edit{text: "throw(${1:term})", range: LxRange[<<3, 26>>...<<3, 28>>]}}, insert_text_format: :snippet, sort_text: "0401_throw:001"]>, #Protocol.Types.Completion.Item<[label: "to_char_list(arg)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "```elixir\n\n```", kind: :markdown]>, detail: "(macro)", filter_text: "to_char_list", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 114, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(4 lines)>, ...>, edits: %LXical.Document.Edit{text: "to_char_list(${1:arg})", range: LxRange[<<3, 26>>...<<3, 28>>]}}, insert_text_format: :snippet, sort_text: "0401_to_char_list:001"]>, #Protocol.Types.Completion.Item<[label: "to_charlist(term)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "```elixir\n\n```", kind: :markdown]>, detail: "(macro)", filter_text: "to_charlist", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 114, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(4 lines)>, ...>, edits: %LXical.Document.Edit{text: "to_charlist(${1:term})", range: LxRange[<<3, 26>>...<<3, 28>>]}}, insert_text_format: :snippet, sort_text: "0401_to_charlist:001"]>, #Protocol.Types.Completion.Item<[label: "to_string(term)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "```elixir\n\n```", kind: :markdown]>, detail: "(macro)", filter_text: "to_string", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 114, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(4 lines)>, ...>, edits: %LXical.Document.Edit{text: "to_string(${1:term})", range: LxRange[<<3, 26>>...<<3, 28>>]}}, insert_text_format: :snippet, sort_text: "0401_to_string:001"]>]
22:29:41.233 [info] Emitting completions: [#Protocol.Types.Completion.Item<[label: "throw(term)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "A non-local return from a function.\n```elixir\n@spec throw(term()) :: no_return()\n```", kind: :markdown]>, detail: "(function)", filter_text: "throw", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 113, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(4 lines)>, ...>, edits: %LXical.Document.Edit{text: "throw(${1:term})", range: LxRange[<<3, 26>>...<<3, 27>>]}}, insert_text_format: :snippet, sort_text: "0401_throw:001"]>, #Protocol.Types.Completion.Item<[label: "tl(list)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Returns the tail of a list. Raises `ArgumentError` if the list is empty.\n```elixir\n@spec tl(nonempty_maybe_improper_list(elem, last)) :: maybe_improper_list(elem, last) | last\nwhen elem: term(), last: term()\n```", kind: :markdown]>, detail: "(function)", filter_text: "tl", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 113, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(4 lines)>, ...>, edits: %LXical.Document.Edit{text: "tl(${1:list})", range: LxRange[<<3, 26>>...<<3, 27>>]}}, insert_text_format: :snippet, sort_text: "0401_tl:001"]>, #Protocol.Types.Completion.Item<[label: "trunc(number)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Returns the integer part of `number`.\n```elixir\n@spec trunc(number()) :: integer()\n```", kind: :markdown]>, detail: "(function)", filter_text: "trunc", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 113, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(4 lines)>, ...>, edits: %LXical.Document.Edit{text: "trunc(${1:number})", range: LxRange[<<3, 26>>...<<3, 27>>]}}, insert_text_format: :snippet, sort_text: "0401_trunc:001"]>, #Protocol.Types.Completion.Item<[label: "tuple_size(tuple)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Returns the size of a tuple.\n```elixir\n@spec tuple_size(tuple()) :: non_neg_integer()\n```", kind: :markdown]>, detail: "(function)", filter_text: "tuple_size", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 113, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(4 lines)>, ...>, edits: %LXical.Document.Edit{text: "tuple_size(${1:tuple})", range: LxRange[<<3, 26>>...<<3, 27>>]}}, insert_text_format: :snippet, sort_text: "0401_tuple_size:001"]>, #Protocol.Types.Completion.Item<[label: "try (try / catch / rescue block)", kind: :class, detail: "", filter_text: "try", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 113, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(4 lines)>, ...>, edits: %LXical.Document.Edit{text: "try do\n  $0\nend", range: LxRange[<<3, 26>>...<<3, 27>>]}}, insert_text_format: :snippet, sort_text: "0401_try (try / catch / rescue block)"]>, #Protocol.Types.Completion.Item<[label: "tap(value, fun)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "```elixir\n\n```", kind: :markdown]>, detail: "(macro)", filter_text: "tap", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 113, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(4 lines)>, ...>, edits: %LXical.Document.Edit{text: "tap(${1:value}, ${2:fun})", range: LxRange[<<3, 26>>...<<3, 27>>]}}, insert_text_format: :snippet, sort_text: "0401_tap:002"]>, #Protocol.Types.Completion.Item<[label: "then(value, fun)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "```elixir\n\n```", kind: :markdown]>, detail: "(macro)", filter_text: "then", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 113, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(4 lines)>, ...>, edits: %LXical.Document.Edit{text: "then(${1:value}, ${2:fun})", range: LxRange[<<3, 26>>...<<3, 27>>]}}, insert_text_format: :snippet, sort_text: "0401_then:002"]>, #Protocol.Types.Completion.Item<[label: "to_char_list(arg)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "```elixir\n\n```", kind: :markdown]>, detail: "(macro)", filter_text: "to_char_list", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 113, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(4 lines)>, ...>, edits: %LXical.Document.Edit{text: "to_char_list(${1:arg})", range: LxRange[<<3, 26>>...<<3, 27>>]}}, insert_text_format: :snippet, sort_text: "0401_to_char_list:001"]>, #Protocol.Types.Completion.Item<[label: "to_charlist(term)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "```elixir\n\n```", kind: :markdown]>, detail: "(macro)", filter_text: "to_charlist", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 113, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(4 lines)>, ...>, edits: %LXical.Document.Edit{text: "to_charlist(${1:term})", range: LxRange[<<3, 26>>...<<3, 27>>]}}, insert_text_format: :snippet, sort_text: "0401_to_charlist:001"]>, #Protocol.Types.Completion.Item<[label: "to_string(term)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "```elixir\n\n```", kind: :markdown]>, detail: "(macro)", filter_text: "to_string", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 113, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(4 lines)>, ...>, edits: %LXical.Document.Edit{text: "to_string(${1:term})", range: LxRange[<<3, 26>>...<<3, 27>>]}}, insert_text_format: :snippet, sort_text: "0401_to_string:001"]>]
22:29:42.356 [info] Emitting completions: []
22:29:43.574 [info] Emitting completions: []
22:29:44.325 [info] Emitting completions: []
22:29:45.856 [info] Completion for LxPos<<4, 6>>
22:29:45.856 [info] Local completions are []
22:29:45.857 [info] Emitting completions: []
22:29:46.668 [info] Completion for LxPos<<4, 13>>
22:29:46.720 [info] Local completions are [%LXical.RemoteControl.Completion.Candidate.Function{argument_names: [], arity: 0, name: "self", origin: "Kernel", type: :function, visibility: :public, spec: "@spec self() :: pid()", summary: "Returns the PID (process identifier) of the calling process.", metadata: %{guard: true}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["dest", "message"], arity: 2, name: "send", origin: "Kernel", type: :function, visibility: :public, spec: "@spec send(dest :: Process.dest(), message) :: message when message: any()", summary: "Sends a message to the given `dest` and returns the message.", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["fun"], arity: 1, name: "spawn", origin: "Kernel", type: :function, visibility: :public, spec: "@spec spawn((-> any())) :: pid()", summary: "Spawns the given function and returns its PID.", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["module", "fun", "args"], arity: 3, name: "spawn", origin: "Kernel", type: :function, visibility: :public, spec: "@spec spawn(module(), atom(), list()) :: pid()", summary: "Spawns the given function `fun` from the given `module` passing it the given\n`args` and returns its PID.", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["fun"], arity: 1, name: "spawn_link", origin: "Kernel", type: :function, visibility: :public, spec: "@spec spawn_link((-> any())) :: pid()", summary: "Spawns the given function, links it to the current process, and returns its PID.", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["module", "fun", "args"], arity: 3, name: "spawn_link", origin: "Kernel", type: :function, visibility: :public, spec: "@spec spawn_link(module(), atom(), list()) :: pid()", summary: "Spawns the given function `fun` from the given `module` passing it the given\n`args`, links it to the current process, and returns its PID.", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["fun"], arity: 1, name: "spawn_monitor", origin: "Kernel", type: :function, visibility: :public, spec: "@spec spawn_monitor((-> any())) :: {pid(), reference()}", summary: "Spawns the given function, monitors it and returns its PID\nand monitoring reference.", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["module", "fun", "args"], arity: 3, name: "spawn_monitor", origin: "Kernel", type: :function, visibility: :public, spec: "@spec spawn_monitor(module(), atom(), list()) :: {pid(), reference()}", summary: "Spawns the given module and function passing the given args,\nmonitors it and returns its PID and monitoring reference.", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["struct"], arity: 1, name: "struct", origin: "Kernel", type: :function, visibility: :public, spec: "@spec struct(module() | struct(), Enumerable.t()) :: struct()", summary: "Creates and updates a struct.", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["struct", "fields"], arity: 2, name: "struct", origin: "Kernel", type: :function, visibility: :public, spec: "@spec struct(module() | struct(), Enumerable.t()) :: struct()", summary: "Creates and updates a struct.", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["struct"], arity: 1, name: "struct!", origin: "Kernel", type: :function, visibility: :public, spec: "@spec struct!(module() | struct(), Enumerable.t()) :: struct()", summary: "Similar to `struct/2` but checks for key validity.", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Function{argument_names: ["struct", "fields"], arity: 2, name: "struct!", origin: "Kernel", type: :function, visibility: :public, spec: "@spec struct!(module() | struct(), Enumerable.t()) :: struct()", summary: "Similar to `struct/2` but checks for key validity.", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["args"], arity: 1, name: "super", origin: "Kernel.SpecialForms", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["term", "modifiers"], arity: 2, name: "sigil_C", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["date_string", "modifiers"], arity: 2, name: "sigil_D", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["naive_datetime_string", "modifiers"], arity: 2, name: "sigil_N", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["arg", "options"], arity: 2, name: "sigil_R", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{hidden: true}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["term", "modifiers"], arity: 2, name: "sigil_S", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["time_string", "modifiers"], arity: 2, name: "sigil_T", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["datetime_string", "modifiers"], arity: 2, name: "sigil_U", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{since: "1.9.0"}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["term", "modifiers"], arity: 2, name: "sigil_W", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["term", "modifiers"], arity: 2, name: "sigil_c", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["term", "modifiers"], arity: 2, name: "sigil_r", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["term", "modifiers"], arity: 2, name: "sigil_s", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["term", "modifiers"], arity: 2, name: "sigil_w", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}]
22:29:46.752 [info] Emitting completions: [#Protocol.Types.Completion.Item<[label: "self()", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Returns the PID (process identifier) of the calling process.\n```elixir\n@spec self() :: pid()\n```", kind: :markdown]>, detail: "(function)", filter_text: "self", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 142, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(5 lines)>, ...>, edits: %LXical.Document.Edit{text: "self()", range: LxRange[<<4, 12>>...<<4, 13>>]}}, insert_text_format: :snippet, sort_text: "0401_self:000"]>, #Protocol.Types.Completion.Item<[label: "send(dest, message)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Sends a message to the given `dest` and returns the message.\n```elixir\n@spec send(dest :: Process.dest(), message) :: message when message: any()\n```", kind: :markdown]>, detail: "(function)", filter_text: "send", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 142, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(5 lines)>, ...>, edits: %LXical.Document.Edit{text: "send(${1:dest}, ${2:message})", range: LxRange[<<4, 12>>...<<4, 13>>]}}, insert_text_format: :snippet, sort_text: "0401_send:002"]>, #Protocol.Types.Completion.Item<[label: "spawn(fun)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Spawns the given function and returns its PID.\n```elixir\n@spec spawn((-> any())) :: pid()\n```", kind: :markdown]>, detail: "(function)", filter_text: "spawn", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 142, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(5 lines)>, ...>, edits: %LXical.Document.Edit{text: "spawn(${1:fun})", range: LxRange[<<4, 12>>...<<4, 13>>]}}, insert_text_format: :snippet, sort_text: "0401_spawn:001"]>, #Protocol.Types.Completion.Item<[label: "spawn(module, fun, args)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Spawns the given function `fun` from the given `module` passing it the given\n`args` and returns its PID.\n```elixir\n@spec spawn(module(), atom(), list()) :: pid()\n```", kind: :markdown]>, detail: "(function)", filter_text: "spawn", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 142, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(5 lines)>, ...>, edits: %LXical.Document.Edit{text: "spawn(${1:module}, ${2:fun}, ${3:args})", range: LxRange[<<4, 12>>...<<4, 13>>]}}, insert_text_format: :snippet, sort_text: "0401_spawn:003"]>, #Protocol.Types.Completion.Item<[label: "spawn_link(fun)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Spawns the given function, links it to the current process, and returns its PID.\n```elixir\n@spec spawn_link((-> any())) :: pid()\n```", kind: :markdown]>, detail: "(function)", filter_text: "spawn_link", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 142, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(5 lines)>, ...>, edits: %LXical.Document.Edit{text: "spawn_link(${1:fun})", range: LxRange[<<4, 12>>...<<4, 13>>]}}, insert_text_format: :snippet, sort_text: "0401_spawn_link:001"]>, #Protocol.Types.Completion.Item<[label: "spawn_link(module, fun, args)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Spawns the given function `fun` from the given `module` passing it the given\n`args`, links it to the current process, and returns its PID.\n```elixir\n@spec spawn_link(module(), atom(), list()) :: pid()\n```", kind: :markdown]>, detail: "(function)", filter_text: "spawn_link", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 142, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(5 lines)>, ...>, edits: %LXical.Document.Edit{text: "spawn_link(${1:module}, ${2:fun}, ${3:args})", range: LxRange[<<4, 12>>...<<4, 13>>]}}, insert_text_format: :snippet, sort_text: "0401_spawn_link:003"]>, #Protocol.Types.Completion.Item<[label: "spawn_monitor(fun)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Spawns the given function, monitors it and returns its PID\nand monitoring reference.\n```elixir\n@spec spawn_monitor((-> any())) :: {pid(), reference()}\n```", kind: :markdown]>, detail: "(function)", filter_text: "spawn_monitor", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 142, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(5 lines)>, ...>, edits: %LXical.Document.Edit{text: "spawn_monitor(${1:fun})", range: LxRange[<<4, 12>>...<<4, 13>>]}}, insert_text_format: :snippet, sort_text: "0401_spawn_monitor:001"]>, #Protocol.Types.Completion.Item<[label: "spawn_monitor(module, fun, args)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Spawns the given module and function passing the given args,\nmonitors it and returns its PID and monitoring reference.\n```elixir\n@spec spawn_monitor(module(), atom(), list()) :: {pid(), reference()}\n```", kind: :markdown]>, detail: "(function)", filter_text: "spawn_monitor", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 142, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(5 lines)>, ...>, edits: %LXical.Document.Edit{text: "spawn_monitor(${1:module}, ${2:fun}, ${3:args})", range: LxRange[<<4, 12>>...<<4, 13>>]}}, insert_text_format: :snippet, sort_text: "0401_spawn_monitor:003"]>, #Protocol.Types.Completion.Item<[label: "struct(struct)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Creates and updates a struct.\n```elixir\n@spec struct(module() | struct(), Enumerable.t()) :: struct()\n```", kind: :markdown]>, detail: "(function)", filter_text: "struct", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 142, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(5 lines)>, ...>, edits: %LXical.Document.Edit{text: "struct(${1:struct})", range: LxRange[<<4, 12>>...<<4, 13>>]}}, insert_text_format: :snippet, sort_text: "0401_struct:001"]>, #Protocol.Types.Completion.Item<[label: "struct(struct, fields)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Creates and updates a struct.\n```elixir\n@spec struct(module() | struct(), Enumerable.t()) :: struct()\n```", kind: :markdown]>, detail: "(function)", filter_text: "struct", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 142, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(5 lines)>, ...>, edits: %LXical.Document.Edit{text: "struct(${1:struct}, ${2:fields})", range: LxRange[<<4, 12>>...<<4, 13>>]}}, insert_text_format: :snippet, sort_text: "0401_struct:002"]>, #Protocol.Types.Completion.Item<[label: "struct!(struct)", kind: :function, documentation: #Protocol.Types.Markup.Content<[value: "Similar to `struct/2` but checks for key validity.\n```elixir\n@spec struct!(module() | struct(), Enumerable.t()) :: struct()\n```", kind: :markdown]>, detail: "(function)", filter_text: "struct!", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 142, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(5 lines)>, ...>, edits: %LXical.Document.Edit{text: "struct!(${1:stru (truncated)
22:29:47.483 [info] Completion for LxPos<<4, 18>>
22:29:47.504 [info] Local completions are []
22:29:47.504 [info] Emitting completions: []
22:29:51.584 [info] Completion for LxPos<<4, 8>>
22:29:51.585 [info] Local completions are []
22:29:51.585 [info] Emitting completions: []
22:29:54.979 [info] Completion for LxPos<<6, 5>>
22:29:55.021 [info] Local completions are [%LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call"], arity: 1, name: "def", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call", "expr"], arity: 2, name: "def", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["funs", "opts"], arity: 2, name: "defdelegate", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["fields"], arity: 1, name: "defexception", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["guard"], arity: 1, name: "defguard", origin: "Kernel", type: :macro, visibility: :public, spec: "@spec defguard(Macro.t()) :: Macro.t()", metadata: %{since: "1.6.0"}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["guard"], arity: 1, name: "defguardp", origin: "Kernel", type: :macro, visibility: :public, spec: "@spec defguardp(Macro.t()) :: Macro.t()", metadata: %{since: "1.6.0"}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["name", "opts"], arity: 2, name: "defimpl", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["name", "opts", "do_block"], arity: 3, name: "defimpl", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call"], arity: 1, name: "defmacro", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call", "expr"], arity: 2, name: "defmacro", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call"], arity: 1, name: "defmacrop", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call", "expr"], arity: 2, name: "defmacrop", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["alias", "do_block"], arity: 2, name: "defmodule", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["keywords_or_behaviour"], arity: 1, name: "defoverridable", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call"], arity: 1, name: "defp", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call", "expr"], arity: 2, name: "defp", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["name", "do_block"], arity: 2, name: "defprotocol", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["fields"], arity: 1, name: "defstruct", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["left", "right"], arity: 2, name: "destructure", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}]
22:29:55.041 [info] Emitting completions: [#Protocol.Types.Completion.Item<[label: "def (define a function)", kind: :class, detail: "", filter_text: "def", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 163, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(6 lines)>, ...>, edits: %LXical.Document.Edit{text: "def ${1:name}($2) do\n  $0\nend", range: LxRange[<<6, 3>>...<<6, 5>>]}}, insert_text_format: :snippet, sort_text: "0401_def (define a function)"]>, #Protocol.Types.Completion.Item<[label: "defdelegate (define a delegate function)", kind: :class, detail: "", filter_text: "defdelegate", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 163, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(6 lines)>, ...>, edits: %LXical.Document.Edit{text: "defdelegate ${1:call}(${2:args}), to: ${3:module}", range: LxRange[<<6, 3>>...<<6, 5>>]}}, insert_text_format: :snippet, sort_text: "0401_defdelegate (define a delegate function)"]>, #Protocol.Types.Completion.Item<[label: "defexception (define an exception)", kind: :class, detail: "", filter_text: "defexception", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 163, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(6 lines)>, ...>, edits: %LXical.Document.Edit{text: "defexception [${1::message}]", range: LxRange[<<6, 3>>...<<6, 5>>]}}, insert_text_format: :snippet, sort_text: "0401_defexception (define an exception)"]>, #Protocol.Types.Completion.Item<[label: "defguard (define a guard macro)", kind: :class, detail: "@spec defguard(Macro.t()) :: Macro.t()", filter_text: "defguard", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 163, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(6 lines)>, ...>, edits: %LXical.Document.Edit{text: "defguard ${1:guard}(${2:args}) when $0", range: LxRange[<<6, 3>>...<<6, 5>>]}}, insert_text_format: :snippet, sort_text: "0401_defguard (define a guard macro)"]>, #Protocol.Types.Completion.Item<[label: "defguardp (define a private guard macro)", kind: :class, detail: "@spec defguardp(Macro.t()) :: Macro.t()", filter_text: "defguardp", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 163, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(6 lines)>, ...>, edits: %LXical.Document.Edit{text: "defguardp ${1:guard}(${2:args}) when $0", range: LxRange[<<6, 3>>...<<6, 5>>]}}, insert_text_format: :snippet, sort_text: "0401_defguardp (define a private guard macro)"]>, #Protocol.Types.Completion.Item<[label: "defimpl (define a protocol implementation)", kind: :class, detail: "", filter_text: "defimpl", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 163, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(6 lines)>, ...>, edits: %LXical.Document.Edit{text: "defimpl ${1:protocol_name}, for: ${2:struct_name} do\n  $0\nend", range: LxRange[<<6, 3>>...<<6, 5>>]}}, insert_text_format: :snippet, sort_text: "0401_defimpl (define a protocol implementation)"]>, #Protocol.Types.Completion.Item<[label: "defmacro (define a macro)", kind: :class, detail: "", filter_text: "defmacro", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 163, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(6 lines)>, ...>, edits: %LXical.Document.Edit{text: "defmacro ${1:name}($2) do\n  $0\nend", range: LxRange[<<6, 3>>...<<6, 5>>]}}, insert_text_format: :snippet, sort_text: "0401_defmacro (define a macro)"]>, #Protocol.Types.Completion.Item<[label: "defmacrop (define a private macro)", kind: :class, detail: "", filter_text: "defmacrop", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 163, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(6 lines)>, ...>, edits: %LXical.Document.Edit{text: "defmacrop ${1:name}($2) do\n  $0\nend", range: LxRange[<<6, 3>>...<<6, 5>>]}}, insert_text_format: :snippet, sort_text: "0401_defmacrop (define a private macro)"]>, #Protocol.Types.Completion.Item<[label: "defmodule (define a module)", kind: :class, detail: "", filter_text: "defmodule", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 163, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(6 lines)>, ...>, edits: %LXical.Document.Edit{text: "defmodule ${1:Wez.StackUnderflow} do\n  $0\nend", range: LxRange[<<6, 3>>...<<6, 5>>]}}, insert_text_format: :snippet, sort_text: "0401_defmodule (define a module)"]>, #Protocol.Types.Completion.Item<[label: "defoverridable (mark a function as overridable)", kind: :class, detail: "", filter_text: "defoverridable", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 163, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(6 lines)>, ...>, edits: %LXical.Document.Edit{text: "defoverridable ${1:keyword_or_behaviour}", range: LxRange[<<6, 3>>...<<6, 5>>]}}, insert_text_format: :snippet, sort_text: "0401_defoverridable (mark a function as overridable)"]>, #Protocol.Types.Completion.Item<[label: "defp (define a private function)", kind: :class, detail: "", filter_text: "defp", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 163, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(6 lines)>, ...>, edits: %LXical.Document.Edit{text: "defp ${1:name}($2) do\n  $0\nend", range: LxRange[<<6, 3>>...<<6, 5>>]}}, insert_text_format: :snippet, sort_text: "0401_defp (define a private function)"]>, #Protocol.Types.Completion.Item<[label: "defprotocol (define a protocol)", kind: :class, detail: "", filter_text: "defprotocol", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 163, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(6 lines)>, ...>, edits: %LXical.Document.Edit{text: "defprotocol ${1:protocol_name} do\n  $0\nend", range: LxRange[<<6, 3>>...<<6, 5>>]}}, insert_text_format: :snippet, sort_text: "0401_defprotocol (define a protocol)"]>, #Protocol.Types.Completion.Item<[label: "defstruct (define a struct)", kind: :class, detail: "", filter_text: "defstruct", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 163, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(6 lines)>, ...>, edits: %LXical.Document.Edit{text: "defstruct [${1:fields}]", range: LxRange[<<6, 3>>...<<6, 5>>]}}, insert_text_format: :snippet, sort_text: "0401_defstruct (define a struct)"]>]
22:30:00.838 [info] Completion for LxPos<<7, 8>>
22:30:00.863 [info] Local completions are [%LXical.RemoteControl.Completion.Candidate.Callback{argument_names: ["t"], arity: 1, metadata: %{optional: false}, name: "message", origin: "Exception", spec: "@callback message(t()) :: String.t()", summary: "Receives the exception struct and must return its message.", type: :callback}]
22:30:00.868 [info] Emitting completions: [#Protocol.Types.Completion.Item<[label: "message(t)", kind: :interface, documentation: #Protocol.Types.Markup.Content<[value: "Receives the exception struct and must return its message.", kind: :markdown]>, detail: "Exception callback (required)", filter_text: "def message", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 185, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(7 lines)>, ...>, edits: %LXical.Document.Edit{text: "@impl true\ndef message(${1:t}) do\n\t$0\nend", range: LxRange[<<7, 3>>...<<7, 8>>]}}, insert_text_format: :snippet, sort_text: "0201_message:001"]>]
22:30:00.876 [info] Completion for LxPos<<7, 9>>
22:30:00.887 [info] Local completions are [%LXical.RemoteControl.Completion.Candidate.Callback{argument_names: ["t"], arity: 1, metadata: %{optional: false}, name: "message", origin: "Exception", spec: "@callback message(t()) :: String.t()", summary: "Receives the exception struct and must return its message.", type: :callback}]
22:30:00.889 [info] Emitting completions: [#Protocol.Types.Completion.Item<[label: "message(t)", kind: :interface, documentation: #Protocol.Types.Markup.Content<[value: "Receives the exception struct and must return its message.", kind: :markdown]>, detail: "Exception callback (required)", filter_text: "def message", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 186, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(7 lines)>, ...>, edits: %LXical.Document.Edit{text: "@impl true\ndef message(${1:t}) do\n\t$0\nend", range: LxRange[<<7, 3>>...<<7, 9>>]}}, insert_text_format: :snippet, sort_text: "0201_message:001"]>]
22:30:03.763 [info] Completion for LxPos<<7, 21>>
22:30:03.771 [info] Emitting completions: []
22:30:03.802 [info] Local completions are [%LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["fields"], arity: 1, name: "defexception", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call"], arity: 1, name: "defmacro", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call", "expr"], arity: 2, name: "defmacro", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call"], arity: 1, name: "defmacrop", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call", "expr"], arity: 2, name: "defmacrop", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["alias", "do_block"], arity: 2, name: "defmodule", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["keywords_or_behaviour"], arity: 1, name: "defoverridable", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["name", "do_block"], arity: 2, name: "defprotocol", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}]
22:30:03.812 [info] Emitting completions: [#Protocol.Types.Completion.Item<[label: "defexception (define an exception)", kind: :class, detail: "", filter_text: "defexception", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 197, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(7 lines)>, ...>, edits: %LXical.Document.Edit{text: "defexception [${1::message}]", range: LxRange[<<7, 19>>...<<7, 21>>]}}, insert_text_format: :snippet, sort_text: "0401_defexception (define an exception)"]>, #Protocol.Types.Completion.Item<[label: "defmacro (define a macro)", kind: :class, detail: "", filter_text: "defmacro", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 197, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(7 lines)>, ...>, edits: %LXical.Document.Edit{text: "defmacro ${1:name}($2) do\n  $0\nend", range: LxRange[<<7, 19>>...<<7, 21>>]}}, insert_text_format: :snippet, sort_text: "0401_defmacro (define a macro)"]>, #Protocol.Types.Completion.Item<[label: "defmacrop (define a private macro)", kind: :class, detail: "", filter_text: "defmacrop", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 197, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(7 lines)>, ...>, edits: %LXical.Document.Edit{text: "defmacrop ${1:name}($2) do\n  $0\nend", range: LxRange[<<7, 19>>...<<7, 21>>]}}, insert_text_format: :snippet, sort_text: "0401_defmacrop (define a private macro)"]>, #Protocol.Types.Completion.Item<[label: "defmodule (define a module)", kind: :class, detail: "", filter_text: "defmodule", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 197, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(7 lines)>, ...>, edits: %LXical.Document.Edit{text: "defmodule ${1:Wez.StackUnderflow} do\n  $0\nend", range: LxRange[<<7, 19>>...<<7, 21>>]}}, insert_text_format: :snippet, sort_text: "0401_defmodule (define a module)"]>, #Protocol.Types.Completion.Item<[label: "defoverridable (mark a function as overridable)", kind: :class, detail: "", filter_text: "defoverridable", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 197, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(7 lines)>, ...>, edits: %LXical.Document.Edit{text: "defoverridable ${1:keyword_or_behaviour}", range: LxRange[<<7, 19>>...<<7, 21>>]}}, insert_text_format: :snippet, sort_text: "0401_defoverridable (mark a function as overridable)"]>, #Protocol.Types.Completion.Item<[label: "defprotocol (define a protocol)", kind: :class, detail: "", filter_text: "defprotocol", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 197, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(7 lines)>, ...>, edits: %LXical.Document.Edit{text: "defprotocol ${1:protocol_name} do\n  $0\nend", range: LxRange[<<7, 19>>...<<7, 21>>]}}, insert_text_format: :snippet, sort_text: "0401_defprotocol (define a protocol)"]>]
22:30:05.455 [info] Completion for LxPos<<7, 30>>
22:30:05.455 [info] Local completions are []
22:30:05.455 [info] Emitting completions: []
22:30:05.824 [info] Completion for LxPos<<7, 33>>
22:30:05.825 [info] Local completions are []
22:30:05.825 [info] Emitting completions: []
22:30:06.557 [info] Completion for LxPos<<7, 38>>
22:30:06.594 [info] Local completions are []
22:30:06.594 [info] Emitting completions: []
22:30:11.650 [info] Completion for LxPos<<9, 4>>
22:30:11.692 [info] Local completions are []
22:30:11.692 [info] Emitting completions: []
22:30:12.263 [info] Response %LXical.Protocol.Responses.Formatting{id: 32, error: nil, result: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 226, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(9 lines)>, ...>, edits: [%LXical.Document.Edit{text: "", range: LxRange[<<7, 1>>...<<7, 3>>]}]}}
22:30:12.296 [info] Compiled wez in 30 ms
22:30:13.985 [info] Response %LXical.Protocol.Responses.Formatting{id: 33, error: nil, result: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 228, dirty?: true, lines: %Lines<"def Wez.StackUnderflow do..."(8 lines)>, ...>, edits: []}}
22:30:14.022 [info] Compiled wez in 35 ms
22:30:18.133 [info] Completion for LxPos<<1, 5>>
22:30:18.155 [info] Completion for LxPos<<1, 6>>
22:30:18.170 [info] Local completions are [%LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["name", "opts"], arity: 2, name: "defimpl", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["name", "opts", "do_block"], arity: 3, name: "defimpl", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call"], arity: 1, name: "defmacro", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call", "expr"], arity: 2, name: "defmacro", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call"], arity: 1, name: "defmacrop", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call", "expr"], arity: 2, name: "defmacrop", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["alias", "do_block"], arity: 2, name: "defmodule", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}]
22:30:18.178 [info] Emitting completions: [#Protocol.Types.Completion.Item<[label: "defimpl (define a protocol implementation)", kind: :class, detail: "", filter_text: "defimpl", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 229, dirty?: true, lines: %Lines<"defm Wez.StackUnderflow do..."(8 lines)>, ...>, edits: %LXical.Document.Edit{text: "defimpl ${1:protocol_name}, for: ${2:struct_name} do\n  $0\nend", range: LxRange[<<1, 1>>...<<1, 5>>]}}, insert_text_format: :snippet, sort_text: "0401_defimpl (define a protocol implementation)"]>, #Protocol.Types.Completion.Item<[label: "defmacro (define a macro)", kind: :class, detail: "", filter_text: "defmacro", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 229, dirty?: true, lines: %Lines<"defm Wez.StackUnderflow do..."(8 lines)>, ...>, edits: %LXical.Document.Edit{text: "defmacro ${1:name}($2) do\n  $0\nend", range: LxRange[<<1, 1>>...<<1, 5>>]}}, insert_text_format: :snippet, sort_text: "0401_defmacro (define a macro)"]>, #Protocol.Types.Completion.Item<[label: "defmacrop (define a private macro)", kind: :class, detail: "", filter_text: "defmacrop", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 229, dirty?: true, lines: %Lines<"defm Wez.StackUnderflow do..."(8 lines)>, ...>, edits: %LXical.Document.Edit{text: "defmacrop ${1:name}($2) do\n  $0\nend", range: LxRange[<<1, 1>>...<<1, 5>>]}}, insert_text_format: :snippet, sort_text: "0401_defmacrop (define a private macro)"]>, #Protocol.Types.Completion.Item<[label: "defmodule (define a module)", kind: :class, detail: "", filter_text: "defmodule", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 229, dirty?: true, lines: %Lines<"defm Wez.StackUnderflow do..."(8 lines)>, ...>, edits: %LXical.Document.Edit{text: "defmodule ${1:Wez.StackUnderflow} do\n  $0\nend", range: LxRange[<<1, 1>>...<<1, 5>>]}}, insert_text_format: :snippet, sort_text: "0401_defmodule (define a module)"]>]
22:30:18.181 [info] Local completions are [%LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call"], arity: 1, name: "defmacro", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call", "expr"], arity: 2, name: "defmacro", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call"], arity: 1, name: "defmacrop", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["call", "expr"], arity: 2, name: "defmacrop", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{defaults: 1}}, %LXical.RemoteControl.Completion.Candidate.Macro{argument_names: ["alias", "do_block"], arity: 2, name: "defmodule", origin: "Kernel", type: :macro, visibility: :public, spec: "", metadata: %{}}]
22:30:18.185 [info] Emitting completions: [#Protocol.Types.Completion.Item<[label: "defmacro (define a macro)", kind: :class, detail: "", filter_text: "defmacro", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 230, dirty?: true, lines: %Lines<"defmo Wez.StackUnderflow do..."(8 lines)>, ...>, edits: %LXical.Document.Edit{text: "defmacro ${1:name}($2) do\n  $0\nend", range: LxRange[<<1, 1>>...<<1, 6>>]}}, insert_text_format: :snippet, sort_text: "0401_defmacro (define a macro)"]>, #Protocol.Types.Completion.Item<[label: "defmacrop (define a private macro)", kind: :class, detail: "", filter_text: "defmacrop", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 230, dirty?: true, lines: %Lines<"defmo Wez.StackUnderflow do..."(8 lines)>, ...>, edits: %LXical.Document.Edit{text: "defmacrop ${1:name}($2) do\n  $0\nend", range: LxRange[<<1, 1>>...<<1, 6>>]}}, insert_text_format: :snippet, sort_text: "0401_defmacrop (define a private macro)"]>, #Protocol.Types.Completion.Item<[label: "defmodule (define a module)", kind: :class, detail: "", filter_text: "defmodule", text_edit: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 230, dirty?: true, lines: %Lines<"defmo Wez.StackUnderflow do..."(8 lines)>, ...>, edits: %LXical.Document.Edit{text: "defmodule ${1:Wez.StackUnderflow} do\n  $0\nend", range: LxRange[<<1, 1>>...<<1, 6>>]}}, insert_text_format: :snippet, sort_text: "0401_defmodule (define a module)"]>]
22:30:19.503 [info] Response %LXical.Protocol.Responses.Formatting{id: 36, error: nil, result: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 234, dirty?: true, lines: %Lines<"defmodule Wez.StackUnderflow do..."(8 lines)>, ...>, edits: []}}
22:30:19.561 [info] Compiled wez in 54 ms
22:30:22.045 [info] Response %LXical.Protocol.Responses.Formatting{id: 37, error: nil, result: %LXical.Document.Changes{document: #LXical.Document<path: "/Users/axcelott/Documents/Personal/wez/lib/wez/stack_underflow.ex", version: 234, dirty?: false, lines: %Lines<"defmodule Wez.StackUnderflow do..."(8 lines)>, ...>, edits: []}}
22:30:22.046 [error] Shutting down
22:30:22.047 [warn] Received an Exit notification. Halting the server in 150ms
22:30:22.047 [info] Child :timer_server of Supervisor :kernel_sup started
Pid: #PID<0.1603.0>
Start Call: :timer.start_link()
Restart: :permanent
Shutdown: 1000
Type: :worker
22:30:22.047 [error] stdio received :eof, server will stop.
22:30:22.047 [error] Child LXical.Server.Transport.StdIO of Supervisor LXical.Server.Supervisor terminated
** (exit) normal
Pid: #PID<0.1547.0>
Start Call: LXical.Server.Transport.StdIO.start_link(:standard_io, &LXical.Server.protocol_message/1)
Restart: :permanent
Shutdown: 5000
Type: :worker
22:30:22.047 [info] Child LXical.Server.Transport.StdIO of Supervisor LXical.Server.Supervisor started
Pid: #PID<0.1604.0>
Start Call: LXical.Server.Transport.StdIO.start_link(:standard_io, &LXical.Server.protocol_message/1)
Restart: :permanent
Shutdown: 5000
Type: :worker
22:30:22.048 [info] Failed to write to standard out (:epipe)
